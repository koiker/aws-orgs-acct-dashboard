AWSTemplateFormatVersion: "2010-09-09"
Description: Solution to capture the last 24 months of AWS accounts created
Parameters:
  BucketName:
    Type: String
    Description: Bucket name where the lambda function will upload the CSV file
  CreateNewBucket:
    Type: String
    Default: True
    AllowedValues:
      - True
      - False
Conditions:
  CreateS3Bucket: !Equals
    - !Ref CreateNewBucket
    - True
Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Condition: CreateS3Bucket
    Properties:
      BucketName: !Ref BucketName
  LambdaGetAccounts:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Role: !GetAtt LambdaRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          DESTINATION_BUCKET: !Ref BucketName
      Code:
        ZipFile: |
          import csv
          import logging
          import os
          from datetime import datetime
          
          import boto3
          from botocore.exceptions import ClientError
          
          logger = logging.getLogger('S3batchCopy')
          logger.addHandler(logging.StreamHandler())
          logger.setLevel(getattr(logging, os.getenv('LOG_LEVEL', 'INFO')))
          DESTINATION_BUCKET = os.getenv('DESTINATION_BUCKET')
          os.chdir('/tmp')
          
          
          def handler(event, context):
              client = boto3.client('organizations')
              present = datetime.now()
              past_24_months = [0 for _ in range(24)]
          
              try:
                  logger.info('Getting the list of AWS accounts from Organizations')
                  resp = client.list_accounts()
                  accounts = resp['Accounts']
                  while next_token := resp.get('NextToken'):
                      resp = client.list_accounts(NextToken=next_token)
                      accounts += resp['Accounts']
                  csv_columns = ['month', 'total_accounts']
                  csv_file = 'accounts.csv'
                  with open(csv_file, 'w') as csvfile:
                      writer = csv.DictWriter(csvfile, fieldnames=csv_columns)
                      writer.writeheader()  # Remove this line if you don't want to add the csv header to the file
                      for account in accounts:
                          if account['Status'] == 'ACTIVE':
                              account['JoinedTimestamp'] = account['JoinedTimestamp'].replace(tzinfo=None)
                              diff_in_days = present - account['JoinedTimestamp']
                              month = int(diff_in_days.days / 30)
                              if month < 24:
                                  past_24_months[month] += 1
                              logger.debug(account)
                      logger.debug(past_24_months)
                      for i in range(24):
                          writer.writerow({'month': i, 'total_accounts': past_24_months[i]})
                  logger.info(f'Sending the file to S3 bucket: {DESTINATION_BUCKET}')
                  s3 = boto3.client('s3')
                  with open(csv_file, 'rb') as data:
                      s3.upload_fileobj(data, DESTINATION_BUCKET, csv_file)
                  logger.info('Completed the file upload!')
              except ClientError as e:
                  logger.exception(f'Unable to get account list from Orgs. Error: {e}')

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Lambda Role for listing AWS Organizations accounts and saving a csv on a S3 bucket
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 's3:PutObject*'
                Resource: !Sub 'arn:aws:s3:::${BucketName}/*'
              - Effect: Allow
                Action: 'organizations:ListAccounts'
                Resource: '*'
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
  RunOrgAccountsList:
    Type: AWS::Events::Rule
    Properties:
      Name: OrgsListAccounts
      ScheduleExpression: 'cron(0 0 * * ? *)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaGetAccounts.Arn
          Id: LambdaGetAccounts


